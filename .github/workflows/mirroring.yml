name: Chocolatine

on:
  push:
    branches: "**"
  pull_request:
    branches: "**"
  workflow_dispatch:

env:
  MIRROR_URL: ${{ secrets.REPO_URL_PROD }}
  EXECUTABLES: "libcuddle.a"

jobs:
  check_coding_style:
    if: ${{ !startsWith(github.ref_name, 'ga-ignore-') }}
    name: Checking coding style
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run coding style checker
        run: /usr/local/bin/check.sh . ~/reports

      - name: Filter Out Ignored Files
        run: grep -v './lib/libshell.a' ~/reports/coding-style-reports.log > ~/reports/filtered-reports.log || true

      - name: Display Filtered Report Log
        run: cat ~/reports/filtered-reports.log

      - name: Check Coding Style Output
        run: |
          if [ -s ~/reports/filtered-reports.log ]; then
            echo "### Coding Style Checker Report 🚀" >> $GITHUB_STEP_SUMMARY
            echo "| Total Errors 🚨 | Major Errors ❗ | Minor Errors ⚠️ | Info Messages ℹ️ |" >> $GITHUB_STEP_SUMMARY
            echo "|-----------------|-----------------|------------------|------------------|" >> $GITHUB_STEP_SUMMARY
            echo "| **Total:** $(wc -l < ~/reports/filtered-reports.log) | **Major:** $(grep -c ": MAJOR:" ~/reports/filtered-reports.log) | **Minor:** $(grep -c ": MINOR:" ~/reports/filtered-reports.log) | **Info:** $(grep -c ": INFO:" ~/reports/filtered-reports.log) |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "$(cat ~/reports/filtered-reports.log)" >> $GITHUB_STEP_SUMMARY
            
            # Also output errors as annotations for GitHub UI
            while IFS= read -r line; do
              file=$(echo "$line" | cut -d ':' -f 1)
              line_num=$(echo "$line" | cut -d ':' -f 2)
              error=$(echo "$line" | cut -d ':' -f 3-)
              echo "::error file=$file,line=$line_num::$error"
            done < ~/reports/filtered-reports.log
            
            exit 1
          else
            echo "No coding style issues found. ✔️ " >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

  check_program_compilation:
    if: ${{ !startsWith(github.ref_name, 'ga-ignore-') && success() }}
    name: Checking that the program compiles correctly
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker:latest
    needs: check_coding_style
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Build project
        id: build
        timeout-minutes: 2
        run: make

      - name: Clean project
        run: make clean

      - name: Verify executables
        run: |
          IFS=',' read -ra EXEC_ARRAY <<< "$EXECUTABLES"
          for exec_path in "${EXEC_ARRAY[@]}"; do
            if [ ! -f "$exec_path" ]; then
              echo "::error::Executable '$exec_path' does not exist"
              exit 1
            fi
            if [ ! -x "$exec_path" ]; then
              echo "::error::File '$exec_path' is not executable"
              exit 1
            fi
            echo "Executable '$exec_path' exists and is executable"
          done

  run_tests:
    name: Running tests
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker:latest
    needs: check_program_compilation
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run tests
        timeout-minutes: 2
        run: make tests_run

  push_to_mirror:
    if: ${{ !startsWith(github.ref_name, 'ga-ignore-') && github.event_name == 'push' && success() }}
    name: Pushing to the mirror repository
    runs-on: ubuntu-latest
    needs: run_tests
    steps:
      - name: Checkout repository with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      - name: Repository mirroring
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.MIRROR_KEY }}